import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import seaborn as sns
from sklearn.linear_model import LinearRegression
from sklearn.metrics import mean_squared_error, r2_score
import matplotlib.pyplot as plt
from google.colab import files
import io
from sklearn.impute import SimpleImputer
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler

def load_data(filename):
    uploaded = files.upload()
    return pd.read_csv(io.BytesIO(uploaded[filename]))

print("Please upload the train.csv file:")
train_data = load_data('train.csv')

print("\nPlease upload the test.csv file:")
test_data = load_data('test.csv')

print("\nFirst few rows of training data:")
print(train_data.head())

print("\nFirst few rows of test data:")
print(test_data.head())

def preprocess_data(df):
    # Convert categorical variables to numeric
    for column in df.select_dtypes(include=['object']).columns:
        df[column] = pd.factorize(df[column])[0]

def preprocess_data(df):
    df_copy = df.copy()
    # Convert categorical variables to numeric
    for column in df_copy.select_dtypes(include=['object']).columns:
        df_copy[column] = pd.factorize(df_copy[column])[0]

    imputer = SimpleImputer(strategy='mean')
    df_imputed = pd.DataFrame(imputer.fit_transform(df_copy), columns=df_copy.columns)
    
    return df_imputed

train_data_processed = preprocess_data(train_data)
test_data_processed = preprocess_data(test_data)

correlation_matrix = train_data_processed.corr()
correlation_with_target = abs(correlation_matrix['SalePrice']).sort_values(ascending=False)
top_features = correlation_with_target[1:16].index.tolist()

print("\nTop 15 features selected based on correlation:")
print(top_features)

X = train_data_processed[top_features]
y = train_data_processed['SalePrice']

X_train, X_val, y_train, y_val = train_test_split(X, y, test_size=0.2, random_state=42)

scaler = StandardScaler()
X_train_scaled = scaler.fit_transform(X_train)
X_val_scaled = scaler.transform(X_val)

model = LinearRegression()
model.fit(X_train_scaled, y_train)

y_pred = model.predict(X_val_scaled)

mse = mean_squared_error(y_val, y_pred)
rmse = np.sqrt(mse)
r2 = r2_score(y_val, y_pred)

print(f"\nRoot Mean Squared Error: {rmse:.2f}")
print(f"R-squared Score: {r2:.4f}")

for feature, coef in zip(top_features, model.coef_):
    print(f"{feature}: {coef:.2f}")
print(f"Intercept: ${model.intercept_:.2f}")

plt.figure(figsize=(10, 6))
plt.scatter(y_val, y_pred, alpha=0.5)
plt.plot([y_val.min(), y_val.max()], [y_val.min(), y_val.max()], 'r--', lw=2)
plt.xlabel("Actual Price")
plt.ylabel("Predicted Price")
plt.title("Actual vs Predicted House Prices")
plt.tight_layout()
plt.show()

importance = pd.DataFrame({'feature': top_features, 'importance': np.abs(model.coef_)})
importance = importance.sort_values('importance', ascending=False)

plt.figure(figsize=(12, 8))
sns.barplot(x='importance', y='feature', data=importance)
plt.title("Feature Importance")
plt.tight_layout()
plt.show()

X_test = test_data_processed[top_features]
X_test_scaled = scaler.transform(X_test)

test_predictions = model.predict(X_test_scaled)

residuals = y_val - y_pred
plt.figure(figsize=(10, 6))
sns.scatterplot(x=y_pred, y=residuals)
plt.axhline(y=0, color='r', linestyle='--')
plt.xlabel("Predicted Price")
plt.ylabel("Residuals")
plt.title("Residual Plot")
plt.tight_layout()
plt.show()

correlation_matrix_selected = train_data_processed[top_features + ['SalePrice']].corr()
plt.figure(figsize=(12, 10))
sns.heatmap(correlation_matrix_selected, annot=True, cmap='coolwarm', vmin=-1, vmax=1, center=0)
plt.title("Correlation Heatmap of Selected Features")
plt.tight_layout()
plt.show()


